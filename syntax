from graphviz import Digraph

# Create a directed graph
diagram = Digraph('ForLoopSyntax', format='png')
diagram.attr(rankdir='LR', nodesep='0.6')

# Node styles
terminal_style = {'shape': 'box', 'style': 'filled', 'fillcolor': '#d0f0c0'}
nonterminal_style = {'shape': 'ellipse', 'style': 'filled', 'fillcolor': '#f0d0c0'}

# Define nodes
diagram.node('Start', 'Start', shape='circle', style='filled', fillcolor='lightgray')
diagram.node('for', '"for"', **terminal_style)
diagram.node('var', '<변수>', **nonterminal_style)
diagram.node('in', '"in"', **terminal_style)
diagram.node('list', '<리스트>', **nonterminal_style)
diagram.node('colon', '":"', **terminal_style)
diagram.node('stmts', '<문장들>', **nonterminal_style)
diagram.node('semi', '";"', **terminal_style)
diagram.node('End', 'End', shape='circle', style='filled', fillcolor='lightgray')

# Connect main <for문> structure
diagram.edges([
    ('Start', 'for'),
    ('for', 'var'),
    ('var', 'in'),
    ('in', 'list'),
    ('list', 'colon'),
    ('colon', 'stmts'),
    ('stmts', 'semi'),
    ('semi', 'End')
])

# Subtree: <변수> ::= <identifier>
diagram.node('id', '<identifier>', **nonterminal_style)
diagram.edge('var', 'id', label='is')

# Subtree: <리스트> ::= [ <원소들> ] | [ ]
diagram.node('list1', '"[ <원소들> ]"', **terminal_style)
diagram.node('list2', '"[ ]"', **terminal_style)
diagram.edge('list', 'list1', label='or')
diagram.edge('list', 'list2')

# Subtree: <원소들> ::= <원소> | <원소> , <원소들>
diagram.node('elem', '<원소>', **nonterminal_style)
diagram.node('comma_elem', '<원소> , <원소들>', **terminal_style)
diagram.edge('list1', 'elem', label='or')
diagram.edge('list1', 'comma_elem')

# Subtree: <문장들> ::= <문장> | <문장> <문장들>
diagram.node('stmt', '<문장>', **nonterminal_style)
diagram.node('stmt_seq', '<문장> <문장들>', **terminal_style)
diagram.edge('stmts', 'stmt', label='or')
diagram.edge('stmts', 'stmt_seq')

# Render the diagram
diagram.render('for_loop_syntax_diagram', cleanup=True)
